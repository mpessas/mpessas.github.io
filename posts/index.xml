<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on That&#39;s weird...</title>
    <link>https://blog.bessas.me/posts/</link>
    <description>Recent content in Posts on That&#39;s weird...</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 26 Oct 2024 08:58:25 +0300</lastBuildDate>
    <atom:link href="https://blog.bessas.me/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Evaluating org code blocks in a Kubernetes pod</title>
      <link>https://blog.bessas.me/posts/org-babel-kubernetes/</link>
      <pubDate>Sat, 26 Oct 2024 08:58:25 +0300</pubDate>
      <guid>https://blog.bessas.me/posts/org-babel-kubernetes/</guid>
      <description>&lt;p&gt;If you use &lt;a href=&#34;https://orgmode.org/worg/org-contrib/babel/&#34;&gt;org-babel&lt;/a&gt;, you can ask it to run any code blocks in a running kubernetes pod using &lt;a href=&#34;https://www.gnu.org/software/tramp/#index-method-kubernetes&#34;&gt;tramp&amp;rsquo;s support for kubernetes&lt;/a&gt;. This can be achieved with the &lt;code&gt;:dir&lt;/code&gt; option:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#000;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-orgmode&#34; data-lang=&#34;orgmode&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#505050&#34;&gt;#+begin_src &lt;/span&gt;&lt;span style=&#34;color:#505050&#34;&gt;python&lt;/span&gt;&lt;span style=&#34;color:#505050&#34;&gt; :results output :dir /kubernetes:container-name.pod-name:/path/to/dir/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#505050&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8f0075&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#2544bb&#34;&gt;&amp;#34;Hello, world!&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#505050&#34;&gt;#+end_src&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You may need to set the options &lt;code&gt;tramp-kubernetes-context&lt;/code&gt; and &lt;code&gt;tramp-kubernetes-namespace&lt;/code&gt; first.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rules for writing tests</title>
      <link>https://blog.bessas.me/posts/rules-for-writing-tests/</link>
      <pubDate>Sun, 11 Nov 2018 12:07:57 +0200</pubDate>
      <guid>https://blog.bessas.me/posts/rules-for-writing-tests/</guid>
      <description>&lt;p&gt;When writing tests for a (Python) codebase:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;We use pytest fixtures. They are way more flexible than an inheritance-based&#xA;system and allow for fine-grained dependencies.&lt;/li&gt;&#xA;&lt;li&gt;Every test case should test for a single behavior. This usually means having a&#xA;single &lt;code&gt;assert&lt;/code&gt; statement in a test case. This makes it easier to know why a&#xA;test failed and what behavior is tested.&lt;/li&gt;&#xA;&lt;li&gt;The structure of the test suite on the filesystem should mirror that of the&#xA;codebase, so as to be quick to find the tests for a piece of code.&lt;/li&gt;&#xA;&lt;li&gt;Any package should be free to define its own fixtures in a local&#xA;&lt;code&gt;conftest.py&lt;/code&gt;. Not all fixtures make sense to go to the top-level&#xA;&lt;code&gt;conftest.py&lt;/code&gt; file.&lt;/li&gt;&#xA;&lt;li&gt;A test can override fixtures defined up in the hierarchy, but it should prefer&#xA;to use a new name that makes sense locally. Otherwise, there could be&#xA;confusion about which fixture is used.&lt;/li&gt;&#xA;&lt;li&gt;A test case should test one specific thing and test it right at the edge of&#xA;where it is defined and not at higher levels. For instance, if you want to&#xA;test the behavior of a function, do not do it via the API that happens to use&#xA;that function deep in the call hierarchy. This way you are guaranteed that the&#xA;test does not fail for any other reason than what you are testing for.&lt;/li&gt;&#xA;&lt;li&gt;A test case must avoid any network calls. Otherwise, tests are slow and&#xA;non-deterministic (e.g. the remote service can go down at any time).&lt;/li&gt;&#xA;&lt;li&gt;A test case should avoid any database calls, if possible. Any I/O is slow.&lt;/li&gt;&#xA;&lt;li&gt;A test case should avoid mocking, when possible. Prefer to use real fixtures&#xA;or refactor the code to not have as many dependencies. Mocking is fragile and&#xA;the whole concept relies on people remembering to update the mocks as they&#xA;refactor the code.&lt;/li&gt;&#xA;&lt;li&gt;Related to mocking: it is mostly useful when you want to avoid side-effects&#xA;(e.g. kicking off a task). It does not always make sense to do dependency&#xA;injection just for the sake of testing. In those cases, mocking is your&#xA;preferable option.&lt;/li&gt;&#xA;&lt;li&gt;There should be switches that are turned off when running the test suite and&#xA;completely kill unnecessary side-effects and 3rd party integrations entirely&#xA;(e.g. any integration with a 3rd-party service). This way it is easier to&#xA;ensure that you avoid any extra I/O and minimize the dependencies for your&#xA;test.&lt;/li&gt;&#xA;&lt;li&gt;Tests should never cross systems: background tasks should not be allowed to be&#xA;called, application-level events should not be handled. For instance, (in the&#xA;case of tasks) write 2 test cases: one that verifies that a task would be&#xA;called with the proper arguments and one that tests how the task works with&#xA;those arguments. Otherwise, your tests also test the message bus.&lt;/li&gt;&#xA;&lt;li&gt;Define the input of a test case explicitly. This way you minimize the&#xA;dependencies of the test case and you are certain what the test does.&lt;/li&gt;&#xA;&lt;li&gt;Functional/end-to-end tests are useful, but they should be a very small part&#xA;of the test suite and indicated as such. These tests are slow, freagile and&#xA;thus difficult-to-maintain. They can be useful, e.g. to actually test that&#xA;making an API call results in a webhook being sent, but (i) that behavior&#xA;should have been covered by multiple tests already and (b) it makes more sense&#xA;to have that test against a staging environment and not in the test suite.&lt;/li&gt;&#xA;&lt;li&gt;If a test case takes more than a few hundred milliseconds to run, it is not a&#xA;unit-test. This is a good indication that a test case does too many things.&lt;/li&gt;&#xA;&lt;li&gt;The default case for a test would be to use &lt;a href=&#34;https://docs.pytest.org/en/latest/parametrize.html#pytest-mark-parametrize-parametrizing-test-functions&#34;&gt;&lt;code&gt;pytest.mark.parametrize&lt;/code&gt;&lt;/a&gt;:&#xA;a test should have certain inputs that lead to certain outputs. Many functions&#xA;should be written in a way that take a certain input and that causes a&#xA;deterministic output. Using &lt;code&gt;parametrize&lt;/code&gt; helps you write functions in such a&#xA;way and it is a very quick way to test for more inputs and outputs.&lt;/li&gt;&#xA;&lt;li&gt;There should be tests not just for the happy path. Code coverage is an&#xA;indicator for how good a test suite is but a meaningless metric. Code should&#xA;be tested as much as possible. The goal should be to cover all possible&#xA;combinations of input/output instead of whether every line has been hit by a&#xA;single test.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Bonus:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Assigning a unique ID to each request in Django</title>
      <link>https://blog.bessas.me/posts/request-ids-in-django/</link>
      <pubDate>Tue, 25 Apr 2017 10:55:11 +0300</pubDate>
      <guid>https://blog.bessas.me/posts/request-ids-in-django/</guid>
      <description>&lt;p&gt;It is a standard practice to assign a unique ID to every request, so that you&#xA;can easily associate the log messages with their request and, thus, make&#xA;debugging easier.&lt;/p&gt;&#xA;&lt;p&gt;You can do that in Django using a middleware. The middleware needs to define the&#xA;&lt;code&gt;process_request&lt;/code&gt; metho and generate the unique ID (e.g. using UUID) to&#xA;associate with the request.&lt;/p&gt;&#xA;&lt;p&gt;One way to use this ID is to pass it as an argument down the call stack and use&#xA;it in every log message. That approach, however, creates a dependency from the&#xA;upper layer (HTTP layer) to the lower level layers (model or domain layer).&#xA;Moreover, this approach requires that every function accepts the ID as an&#xA;argument, which complicates the function signatures.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Speeding up the Django database creation with pytest</title>
      <link>https://blog.bessas.me/posts/pytest-and-migrations/</link>
      <pubDate>Tue, 25 Apr 2017 07:48:22 +0300</pubDate>
      <guid>https://blog.bessas.me/posts/pytest-and-migrations/</guid>
      <description>&lt;p&gt;The standard way to set up the database for running your Django test suite is to&#xA;run the the projects migrations from scratch.&lt;/p&gt;&#xA;&lt;p&gt;This can be quite slow, though, when there are many migrations. For this reason,&#xA;&lt;code&gt;pytest-django&lt;/code&gt; provides an option to keep the database between runs, so as to&#xA;avoid this cost every time (&lt;code&gt;--reuse-db&lt;/code&gt; option).&lt;/p&gt;&#xA;&lt;p&gt;However, one still has to create the database every now and then from scratch,&#xA;e.g. when there are new migrations in the current branch.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Another reason to decouple your code from the models</title>
      <link>https://blog.bessas.me/posts/another-reason-to-decouple-from-models/</link>
      <pubDate>Tue, 21 Mar 2017 09:36:05 +0200</pubDate>
      <guid>https://blog.bessas.me/posts/another-reason-to-decouple-from-models/</guid>
      <description>&lt;p&gt;As the application grows, the schema in the database will evolve as well, e.g.&#xA;you will need new tables or add new columns to an existing table.&lt;/p&gt;&#xA;&lt;p&gt;One of the changes that may need to take place is editing the column, either the&#xA;type or its size or even the type of data it contains.&lt;/p&gt;&#xA;&lt;p&gt;If you want to do the change without incurring any downtime, the best way to&#xA;alter the column is to add a new column, migrate the data and then remove the&#xA;old one. (That said, there are cases where a database will allow you to do the&#xA;edit in-place without locking the table.)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using .env files</title>
      <link>https://blog.bessas.me/posts/using-env-files/</link>
      <pubDate>Sat, 13 Aug 2016 10:25:01 +0200</pubDate>
      <guid>https://blog.bessas.me/posts/using-env-files/</guid>
      <description>&lt;p&gt;Enabling the environment variables in a bash script:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;env $(cat .env.test | xargs)&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Django, forms, models and DRY</title>
      <link>https://blog.bessas.me/posts/django-forms-models-and-dry/</link>
      <pubDate>Sun, 23 Nov 2014 09:42:37 +0200</pubDate>
      <guid>https://blog.bessas.me/posts/django-forms-models-and-dry/</guid>
      <description>&lt;p&gt;Django provides a &lt;code&gt;forms&lt;/code&gt; package to make working with forms in web applications easier.&lt;/p&gt;&#xA;&lt;p&gt;Forms work by subclassing the &lt;code&gt;Form&lt;/code&gt; class and defining the fields in the class:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;class MyForm(forms.Form):&#xA;    field1 = forms.CharField(max_length=10)&#xA;    field2 = forms.IntegerField()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;But in most cases a form mirrors a model in the database, where you have already&#xA;declared the properties for those fields. For this use case, Django provides&#xA;&lt;code&gt;ModelForm&lt;/code&gt; to use as a base class.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Exposing objects in multiple represenations</title>
      <link>https://blog.bessas.me/posts/exposing-objects-in-multiple-represenations/</link>
      <pubDate>Tue, 11 Feb 2014 11:11:02 +0200</pubDate>
      <guid>https://blog.bessas.me/posts/exposing-objects-in-multiple-represenations/</guid>
      <description>&lt;h2 id=&#34;the-need-for-multiple-representations&#34;&gt;The need for multiple representations&lt;/h2&gt;&#xA;&lt;p&gt;Many applications have multiple interfaces: an API that others use to access the&#xA;application programmatically or a rich web client built with JavaScript for the&#xA;end-users and so on.&lt;/p&gt;&#xA;&lt;p&gt;The needs of each interface may be different, though. The API, for&#xA;instance, may need to expose all details of a specific object, but the web&#xA;interface only needs certain details and maybe some extra attributes.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using gettext in Django</title>
      <link>https://blog.bessas.me/posts/using-gettext-in-django/</link>
      <pubDate>Sat, 02 Nov 2013 11:20:24 +0200</pubDate>
      <guid>https://blog.bessas.me/posts/using-gettext-in-django/</guid>
      <description>&lt;p&gt;Internationalization (i18n) is the process of enabling your software to be&#xA;translated to other languages. This is done by making the software able to map&#xA;all user-visible strings to their translations in a specific language and use&#xA;them, when appropriate.&lt;/p&gt;&#xA;&lt;p&gt;The i18n toolset django uses is &lt;strong&gt;gettext&lt;/strong&gt; and is enabled with the &lt;code&gt;USE_I18N&lt;/code&gt;&#xA;setting. Gettext works as follows: First, the developer marks the &lt;strong&gt;translation&#xA;strings&lt;/strong&gt; in the source code and then he runs the &lt;code&gt;xgettext&lt;/code&gt; command to create&#xA;the source PO file. The &lt;code&gt;xgettext&lt;/code&gt; command analyzes the source code to locate&#xA;the strings that were marked as translation strings and&#xA;extracts them into a PO file, which can be translated to the target languages.&#xA;The last step is to &lt;em&gt;compile&lt;/em&gt; the PO files into binary message files (.mo files) with&#xA;the &lt;code&gt;msgfmt&lt;/code&gt; command.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Running your Django tests in memory with PostgreSQL</title>
      <link>https://blog.bessas.me/posts/running-tests-in-memory-with-postgresql/</link>
      <pubDate>Sat, 19 Oct 2013 11:22:45 +0200</pubDate>
      <guid>https://blog.bessas.me/posts/running-tests-in-memory-with-postgresql/</guid>
      <description>&lt;p&gt;Many people advise to use sqlite for running your tests in django. The reason is&#xA;that Django will automatically create the database &lt;a href=&#34;http://www.sqlite.org/inmemorydb.html&#34;&gt;in-memory&lt;/a&gt;, which speeds up&#xA;any tests that query the database.&lt;/p&gt;&#xA;&lt;p&gt;However, this means that your test database is different than your production&#xA;one, which might cause issues because of the differences between the databases,&#xA;such as how they handle transactions. Besides, you might be using&#xA;&lt;a href=&#34;https://github.com/mpessas/django-pg-extensions&#34;&gt;features of PostgreSQL&lt;/a&gt; that sqlite does not support.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Forward attribute access for wrapper classes</title>
      <link>https://blog.bessas.me/posts/forward-attribute-access-for-wrapper-classes/</link>
      <pubDate>Thu, 11 Jul 2013 11:24:31 +0200</pubDate>
      <guid>https://blog.bessas.me/posts/forward-attribute-access-for-wrapper-classes/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s say you want to create a wrapper class around a Django model. For convenience, you want your wrapper class to forward any direct field access calls to the model it wraps. That is, you want the following code to work:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;class MyModel(models.Model):&#xA;    slug = models.SlugField()&#xA;&#xA;class Wrapper(object):&#xA;    model = MyModel&#xA;&#xA;    def __init__(self, w):&#xA;        self.w = w&#xA;&#xA;w = MyModel(slug=&#39;slug&#39;)&#xA;w = Wrapper(w)&#xA;print w.slug&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;This boils down to dynamically adding properties to the &lt;code&gt;Wrapper&lt;/code&gt; class that forward the call to and return the value from the wrapped instance.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using functions in UPDATE queries from the Django ORM</title>
      <link>https://blog.bessas.me/posts/using-functions-in-update-queries-django/</link>
      <pubDate>Sat, 06 Apr 2013 11:26:49 +0200</pubDate>
      <guid>https://blog.bessas.me/posts/using-functions-in-update-queries-django/</guid>
      <description>&lt;p&gt;PostgreSQL is a great database and comes with many great and really useful features, one of which is arrays. There are various apps that add support for arrays in the Django ORM, like &lt;a href=&#34;https://github.com/ecometrica/django-dbarray&#34;&gt;django-dbarray&lt;/a&gt;, &lt;a href=&#34;https://github.com/niwibe/djorm-ext-pgarray&#34;&gt;djorm-ext-pgarray&lt;/a&gt; and &lt;a href=&#34;https://github.com/mpessas/django-pg-extensions&#34;&gt;django-pg-extensions&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;However, those packages provide only fields that represent a PostgreSQL array (and maybe support for some of the operators), but not for the &lt;a href=&#34;http://www.postgresql.org/docs/9.2/static/functions-array.html&#34;&gt;functions&lt;/a&gt; that PostgreSQL provides to manipulate arrays. Some of those functions are really useful, like adding elements to an array.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Optimizing the operation of downloading files in Transifex</title>
      <link>https://blog.bessas.me/posts/transifex-optimize-download/</link>
      <pubDate>Sat, 02 Feb 2013 11:28:43 +0200</pubDate>
      <guid>https://blog.bessas.me/posts/transifex-optimize-download/</guid>
      <description>&lt;p&gt;This is the story of taking a 80 seconds operation down to 2 seconds.&lt;/p&gt;&#xA;&lt;p&gt;One of the most common operations in Transifex is downloading a&#xA;translation file (the second is uploading one). Since files are downloaded all the time, the process should be as fast as possible.&lt;/p&gt;&#xA;&lt;p&gt;Some projects, however, have files with thousands of entries, which&#xA;presented us with some challenges: download times could take a lot of seconds depending on the size of the file — an issue for both our users and our servers :).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Testing with PostgreSQL</title>
      <link>https://blog.bessas.me/posts/testing-with-postgresql/</link>
      <pubDate>Fri, 06 Jan 2012 11:30:08 +0200</pubDate>
      <guid>https://blog.bessas.me/posts/testing-with-postgresql/</guid>
      <description>&lt;p&gt;Transifex is a quite big application, counting tens of thousands of lines of Python, javascript and HTML code. In order to make sure the code works, it has an extensive test suite, which, obviously, takes quite some time to run.&lt;/p&gt;&#xA;&lt;p&gt;There are various things that can be done to make tests run faster. But let&amp;rsquo;s talk about databases.&lt;/p&gt;&#xA;&lt;p&gt;Transifex is built on top of &lt;a href=&#34;https://www.djangoproject.com&#34;&gt;Django&lt;/a&gt; and uses its ORM. As a result, it can use various database backends, like &lt;a href=&#34;http://www.sqlite.org/&#34;&gt;SQLite&lt;/a&gt; and &lt;a href=&#34;http://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TimedRotatingFileHandler</title>
      <link>https://blog.bessas.me/posts/timedrotatingfilehandler/</link>
      <pubDate>Tue, 27 Dec 2011 11:31:39 +0200</pubDate>
      <guid>https://blog.bessas.me/posts/timedrotatingfilehandler/</guid>
      <description>&lt;p&gt;&lt;!-- raw HTML omitted --&gt;(For future reference.)&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://docs.python.org/library/logging.handlers.html#timedrotatingfilehandler&#34;&gt;&lt;code&gt;TimedRotatingFileHandler&lt;/code&gt;&lt;/a&gt; logs messages to a file and rotates it based on time values.&lt;/p&gt;&#xA;&lt;p&gt;Among the arguments it accepts is the &lt;code&gt;when&lt;/code&gt; argument, which specifies the type of interval. One of the possible values is &lt;code&gt;&#39;W&#39;&lt;/code&gt;, which specifies that the rollover should be done on a specific day of the week (with &lt;code&gt;0&lt;/code&gt; being Monday). The day is specified by appending the necessary number (&lt;code&gt;[0-6]&lt;/code&gt;) to &lt;code&gt;when&lt;/code&gt;, like &lt;code&gt;W0&lt;/code&gt; for rotating the logs on Mondays.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Russ Cox&#39;s articles on regular expressions</title>
      <link>https://blog.bessas.me/posts/russ-cox-regular-expressions/</link>
      <pubDate>Mon, 26 Dec 2011 11:33:09 +0200</pubDate>
      <guid>https://blog.bessas.me/posts/russ-cox-regular-expressions/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://swtch.com/~rsc/regexp/regexp1.html&#34;&gt;http://swtch.com/~rsc/regexp/regexp1.html&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://swtch.com/~rsc/regexp/regexp2.html&#34;&gt;http://swtch.com/~rsc/regexp/regexp2.html&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://swtch.com/~rsc/regexp/regexp3.html&#34;&gt;http://swtch.com/~rsc/regexp/regexp3.html&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>DISTINCT in SQL</title>
      <link>https://blog.bessas.me/posts/distinct-in-sql/</link>
      <pubDate>Sat, 12 Nov 2011 11:34:20 +0200</pubDate>
      <guid>https://blog.bessas.me/posts/distinct-in-sql/</guid>
      <description>&lt;p&gt;How does a RDBMS execute a query that has the &lt;code&gt;DISTINCT&lt;/code&gt; keyword? The most effective  way to ensure the uniqueness of the returned rows of a query is to sort them first; that is, to sort the result based on all fields. Depending on the number of fields &lt;code&gt;SELECT&lt;/code&gt;ed, this sorting could take a lot of time and need a lot of RAM. If the available RAM is not enough, the RDBMS will resort to using the disk, which is too slow.&lt;/p&gt;</description>
    </item>
    <item>
      <title>iptables in a hurry</title>
      <link>https://blog.bessas.me/posts/iptables-in-a-hurry/</link>
      <pubDate>Wed, 09 Nov 2011 11:35:21 +0200</pubDate>
      <guid>https://blog.bessas.me/posts/iptables-in-a-hurry/</guid>
      <description>&lt;p&gt;Accepting incoming connections to a port only from specific hosts in the middle of the night:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;iptables -I INPUT -p tcp --dport $dport -j REJECT&#xA;for ip in $ips; do&#xA;    iptables -I INPUT -p tcp --dport $dport --source $ip -j ACCEPT&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;We have to do it in the above order, since -I &lt;strong&gt;inserts&lt;/strong&gt; the rule at the head of the list of rules.&lt;/p&gt;</description>
    </item>
    <item>
      <title>On database and code changes</title>
      <link>https://blog.bessas.me/posts/on-database-and-code-changes/</link>
      <pubDate>Thu, 13 Oct 2011 11:36:36 +0200</pubDate>
      <guid>https://blog.bessas.me/posts/on-database-and-code-changes/</guid>
      <description>&lt;p&gt;Running a web application means that you always develop new features (and fix bugs) which should be deployed as soon as possible. This is the only way these enhancements reach your users. However, it also means that your application is used by people from all over the world, i.e., there is no point in time, when you can just shutdown the servers and do any necessary maintenance work; downtime should be avoided.&lt;/p&gt;</description>
    </item>
    <item>
      <title>On database schema changes</title>
      <link>https://blog.bessas.me/posts/on-database-schema-changes/</link>
      <pubDate>Sun, 09 Oct 2011 11:37:46 +0200</pubDate>
      <guid>https://blog.bessas.me/posts/on-database-schema-changes/</guid>
      <description>&lt;p&gt;Working on a constantly evolving web application means that sooner or later you will have to change your database schema. One of the most difficult changes to make is to add a new column to a table.&lt;/p&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s say you need to add a new column &lt;code&gt;ncol&lt;/code&gt; to an existing table &lt;code&gt;t&lt;/code&gt; in a database. The new column is of type &lt;code&gt;INT&lt;/code&gt;, it cannot take the &lt;code&gt;NULL&lt;/code&gt; value and defaults to the value &lt;code&gt;0&lt;/code&gt;. The SQL command to use is&lt;/p&gt;</description>
    </item>
    <item>
      <title>On reference tables</title>
      <link>https://blog.bessas.me/posts/on-reference-tables/</link>
      <pubDate>Tue, 04 Oct 2011 11:38:38 +0200</pubDate>
      <guid>https://blog.bessas.me/posts/on-reference-tables/</guid>
      <description>&lt;p&gt;Working on a constantly evolving web application means that sooner or later you will have to change your database schema. One of the most difficult changes to make is to add a new column to a table.&lt;/p&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s say you need to add a new column &lt;code&gt;ncol&lt;/code&gt; to an existing table &lt;code&gt;t&lt;/code&gt; in a database. The new column is of type &lt;code&gt;INT&lt;/code&gt;, it cannot take the &lt;code&gt;NULL&lt;/code&gt; value and defaults to the value &lt;code&gt;0&lt;/code&gt;. The SQL command to use is&lt;/p&gt;</description>
    </item>
    <item>
      <title>On database denormalization</title>
      <link>https://blog.bessas.me/posts/on-database-denormalization/</link>
      <pubDate>Thu, 29 Sep 2011 11:39:32 +0200</pubDate>
      <guid>https://blog.bessas.me/posts/on-database-denormalization/</guid>
      <description>&lt;p&gt;One of the factors of a successful web application is its speed. However, the more successful the application is, the more serious performance issues it will have. As the users and their activity in the application and the data they manage begin to increase, every action becomes even slower, since it competes with more requests for the same resources (CPU, RAM, I/O) and has more data to manage. Usually, the problem lies in the database hits and the queries the app executes. So, if you want to scale, you have at one point or another to look at your database access patterns.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
