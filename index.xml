<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>That&#39;s weird...</title>
    <link>https://mpessas.github.io/index.xml</link>
    <description>Recent content on That&#39;s weird...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 13 Aug 2016 10:25:01 +0200</lastBuildDate>
    <atom:link href="https://mpessas.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Using .env files</title>
      <link>https://mpessas.github.io/posts/using-env-files/</link>
      <pubDate>Sat, 13 Aug 2016 10:25:01 +0200</pubDate>
      
      <guid>https://mpessas.github.io/posts/using-env-files/</guid>
      <description>&lt;p&gt;Enabling the environment variables in a bash script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;env $(cat .env.test | xargs)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Django, forms, models and DRY</title>
      <link>https://mpessas.github.io/posts/django-forms-models-and-dry/</link>
      <pubDate>Sun, 23 Nov 2014 09:42:37 +0200</pubDate>
      
      <guid>https://mpessas.github.io/posts/django-forms-models-and-dry/</guid>
      <description>&lt;p&gt;Django provides a &lt;code&gt;forms&lt;/code&gt; package to make working with forms in web applications easier.&lt;/p&gt;

&lt;p&gt;Forms work by subclassing the &lt;code&gt;Form&lt;/code&gt; class and defining the fields in the class:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class MyForm(forms.Form):
    field1 = forms.CharField(max_length=10)
    field2 = forms.IntegerField()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But in most cases a form mirrors a model in the database, where you have already
declared the properties for those fields. For this use case, Django provides
&lt;code&gt;ModelForm&lt;/code&gt; to use as a base class.&lt;/p&gt;

&lt;p&gt;As an example, if you had the following model:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class MyModel(models.Model):
    field1 = models.CharField(max_length=10)
    field2 = models.IntegerField()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you could declare a form for it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class MyModelForm(forms.ModelForm):
    class Meta:
        model = MyModel
        fields = (&#39;field1&#39;, &#39;field2&#39;, )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are cases, however, where your form does not correspond to just one model
or the mapping is not very clear. For instance, you provide an API for your web
application, which must be stable no matter how the models change, and have some
complex validation that spans across models. Keep in mind that at the end of the
day &lt;a href=&#34;http://www.pydanny.com/core-concepts-django-forms.html#forms-validate-dictionaries&#34;&gt;forms validate dictionaries&lt;/a&gt; and they are pretty good at it, so why not
use them for validation in general?&lt;/p&gt;

&lt;p&gt;In this case, you could create the form by hand, but that is not very DRY; you
would have to edit validation in two places, whenever a change is needed.&lt;/p&gt;

&lt;p&gt;A better approach is to do what Django already does in order to construct a
&lt;code&gt;ModelForm&lt;/code&gt;. Every field in a model has a method called &lt;a href=&#34;https://github.com/django/django/blob/bcb693ebd4d3743cb194c6fd05b2d70fb9696a4c/django/db/models/fields/__init__.py#L809&#34;&gt;&lt;code&gt;formfield&lt;/code&gt;&lt;/a&gt;, which
constructs a &lt;code&gt;forms.Field&lt;/code&gt; instance that corresponds to itself: it has the
correct type and correct arguments in place, which you can also override.&lt;/p&gt;

&lt;p&gt;The following function allows you to create a &lt;code&gt;forms.Field&lt;/code&gt; this way.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def construct_form_field(model, field_name, **kwargs):
    app_name, model_name = model.split(&#39;.&#39;, 1)
    Model = get_model(app_name, model_name)
    field = Model._meta.get_field_by_name(field_name)[0]
    return field.formfield(**kwargs)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use this function then in a form to define the fields you need:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class MyForm(forms.Form):
    field1 = construct_form_field(&#39;app.Model1&#39;, &#39;field1&#39;)
    field2 = construct_form_field(&#39;app.Model2&#39;, &#39;field2&#39;)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Exposing objects in multiple represenations</title>
      <link>https://mpessas.github.io/posts/exposing-objects-in-multiple-represenations/</link>
      <pubDate>Tue, 11 Feb 2014 11:11:02 +0200</pubDate>
      
      <guid>https://mpessas.github.io/posts/exposing-objects-in-multiple-represenations/</guid>
      <description>

&lt;h2 id=&#34;the-need-for-multiple-representations&#34;&gt;The need for multiple representations&lt;/h2&gt;

&lt;p&gt;Many applications have multiple interfaces: an API that others use to access the
application programmatically or a rich web client built with JavaScript for the
end-users and so on.&lt;/p&gt;

&lt;p&gt;The needs of each interface may be different, though. The API, for
instance, may need to expose all details of a specific object, but the web
interface only needs certain details and maybe some extra attributes.&lt;/p&gt;

&lt;p&gt;This means that the objects living in the business core need to be exposed to
multiple clients in different ways. How can you achieve this efficiently?&lt;/p&gt;

&lt;p&gt;The following examples will use Django, but the same principles apply in
general.&lt;/p&gt;

&lt;p&gt;We will also use a &lt;code&gt;User&lt;/code&gt; object as an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class User(object):

    def __init__(self, username, password, email, firstname, lastname):
        self.username = username
        self.password = password
        self.email = email
        self.firstname = firstname
        self.lastname = lastname
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is not a Django model, since you can also have plain python classes for
your business logic.&lt;/p&gt;

&lt;h2 id=&#34;solutions-that-don-t-scale-putting-the-code-in-the-view&#34;&gt;Solutions that don&amp;rsquo;t scale: Putting the code in the view&lt;/h2&gt;

&lt;p&gt;The first thing that usually comes to mind is to do the necessary transformation
in the view that exposes the object.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import json
from django.http import HttpResponse

def user_details(request, username):
    # Fetch the user from the database.
    user = fetch_user(username=username)
    user_dict = {}
    for attr in [username, email, firstname, lastname]:
        user_dict[attr] = getattr(user, attr)
    return HttpResponse(
        json.dumps(user_dict), content_type=&amp;quot;application/json&amp;quot;
    )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A similar approach would be followed in the API views as well.&lt;/p&gt;

&lt;p&gt;This approach leads, however, to &lt;strong&gt;duplicated code&lt;/strong&gt;: every time you need to
serialize a &lt;code&gt;User&lt;/code&gt; object you need to follow the exactly same process and have
the exactly same code.&lt;/p&gt;

&lt;p&gt;Until you don&amp;rsquo;t; a use-case will come up where you need a different
representation. As an example, you might need in a view to expose the number of
photos a &lt;code&gt;User&lt;/code&gt; might have as well:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def user_details_with_photos(request, username):
    # Fetch the user from the database.
    user = fetch_user(username=username)
    user_dict = {}
    for attr in [username, email, firstname, lastname]:
        user_dict[attr] = getattr(user, attr)
    user_dict[&amp;quot;nphotos&amp;quot;] = user.nphotos()
    return HttpResponse(
        json.dumps(user_dict), content_type=&amp;quot;application/json&amp;quot;
    )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which is the same code as before with just one extra line.&lt;/p&gt;

&lt;p&gt;As a result, the next time you have to change something, you have to make the
change in many places, hoping you do not forget one, making this approach
&lt;strong&gt;error-prone&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;These are all well-known drawbacks of putting logic in the views.&lt;/p&gt;

&lt;h2 id=&#34;solutions-that-don-t-scale-putting-the-code-in-the-object&#34;&gt;Solutions that don&amp;rsquo;t scale: Putting the code in the object&lt;/h2&gt;

&lt;p&gt;The next approach is to create a &lt;strong&gt;fat model&lt;/strong&gt; and keep the view &lt;strong&gt;skinny&lt;/strong&gt;.
That is, we move the code that generates the representation of the &lt;code&gt;User&lt;/code&gt; object
in the &lt;code&gt;User&lt;/code&gt; class itself:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class User(object):
    ...

    def to_dict(self):
        result = {}
        for attr in [username, email, firstname, lastname]:
            result[attr] = getattr(self, attr)
        return result

    def to_dict_with_photos(self):
        result = self.to_dict()
        result[&amp;quot;nphotos&amp;quot;] = user.nphotos()
        return result
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The corresponding views become:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def user_details(request, username):
    user = fetch_user(username=username)
    return HttpResponse(
        json.dumps(user.to_dict()),
        content_type=&amp;quot;application/json&amp;quot;
    )


def user_details_with_photos(request, username):
    user = fetch_user(username=username)
    return HttpResponse(
        json.dumps(user.to_dict_with_photos()),
        content_type=&amp;quot;application/json&amp;quot;
    )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This solves the problem of &lt;strong&gt;code reuse&lt;/strong&gt; nicely. Every way to represent the
&lt;code&gt;User&lt;/code&gt; object is in one place, in the &lt;code&gt;User&lt;/code&gt; class, and the code in the views
becomes simpler. Furthermore, tests become much simpler to write: you need to
test the two methods that convert a &lt;code&gt;User&lt;/code&gt; object to a dictionary, instead of
testing the views directly. Thus, the tests become faster as well,since they do
not have to go through the HTTP stack.&lt;/p&gt;

&lt;p&gt;However, the &lt;code&gt;User&lt;/code&gt; class has become quite large this way. In addition to the
functionality it must support for a user instance, the class also has many
methods to generate all necessary transformations.&lt;/p&gt;

&lt;p&gt;In other words, this approach violates the
&lt;a href=&#34;http://en.wikipedia.org/wiki/Single_responsibility_principle&#34;&gt;&lt;strong&gt;Single Responsibility Principle&lt;/strong&gt;&lt;/a&gt;. The &lt;code&gt;User&lt;/code&gt; class has two
responsibilities, one to support the necessary functionality of a &lt;code&gt;User&lt;/code&gt; object
and one to represent the object in multiple ways. The &lt;code&gt;User&lt;/code&gt; class becomes this
way harder to understand and more fragile.&lt;/p&gt;

&lt;h2 id=&#34;moving-the-logic-for-the-representations-to-separate-processes&#34;&gt;Moving the logic for the representations to separate processes&lt;/h2&gt;

&lt;p&gt;The solution to this problem is to extract the responsibility of generating a
representation of a &lt;code&gt;User&lt;/code&gt; instance to a separate function or class.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class UserRepresentations(object):

    @classmethod
    def to_dict(cls, user):
        result = {}
        for attr in [username, email, firstname, lastname]:
            result[attr] = getattr(user, attr)
        return result

    @classmethod
    def to_dict_with_photos(cls, user):
        result = cls.to_dict(user)
        result[&amp;quot;nphotos&amp;quot;] = user.nphotos()
        return result
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As an added benefit, these representations can be unit-tested in isolation,
without any dependency on the business objects (and perhaps the database).&lt;/p&gt;

&lt;p&gt;The views now become:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def user_details(request, username):
    user = fetch_user(username=username)
    user_dict = UserRepresentations.to_dict(user)
    return HttpResponse(
        json.dumps(user_dict), content_type=&amp;quot;application/json&amp;quot;
    )


def user_details_with_photos(request, username):
    user = fetch_user(username=username)
    user_dict = UserRepresentations.to_dict_with_photos(user)
    return HttpResponse(
        json.dumps(user_dict), content_type=&amp;quot;application/json&amp;quot;
    )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The result is a clear separation of concerns; that is, a cleaner codebase and of
higher quality.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using gettext in Django</title>
      <link>https://mpessas.github.io/posts/using-gettext-in-django/</link>
      <pubDate>Sat, 02 Nov 2013 11:20:24 +0200</pubDate>
      
      <guid>https://mpessas.github.io/posts/using-gettext-in-django/</guid>
      <description>

&lt;p&gt;Internationalization (i18n) is the process of enabling your software to be
translated to other languages. This is done by making the software able to map
all user-visible strings to their translations in a specific language and use
them, when appropriate.&lt;/p&gt;

&lt;p&gt;The i18n toolset django uses is &lt;strong&gt;gettext&lt;/strong&gt; and is enabled with the &lt;code&gt;USE_I18N&lt;/code&gt;
setting. Gettext works as follows: First, the developer marks the &lt;strong&gt;translation
strings&lt;/strong&gt; in the source code and then he runs the &lt;code&gt;xgettext&lt;/code&gt; command to create
the source PO file. The &lt;code&gt;xgettext&lt;/code&gt; command analyzes the source code to locate
the strings that were marked as translation strings and
extracts them into a PO file, which can be translated to the target languages.
The last step is to &lt;em&gt;compile&lt;/em&gt; the PO files into binary message files (.mo files) with
the &lt;code&gt;msgfmt&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;Django makes sure to ease the process by providing its own management commands:
&lt;code&gt;makemessages&lt;/code&gt; that extracts the strings from the source code and
&lt;code&gt;compilemessages&lt;/code&gt; that converts the files into the binary ones. It also expects to find the PO files for a language under the directory
&lt;code&gt;locale/&amp;lt;locale&amp;gt;/LC_MESSAGES/django.po&lt;/code&gt;, where &lt;code&gt;&amp;lt;locale&amp;gt;&lt;/code&gt; is the language code.&lt;/p&gt;

&lt;p&gt;In the runtime, whenever a gettext function is used, it will use the PO file
that corresponds to the currently active locale and return the correct
translation that corresponds to this string. If no translation is found, the
original string is used instead.&lt;/p&gt;

&lt;h2 id=&#34;the-gettext-functions&#34;&gt;The gettext functions&lt;/h2&gt;

&lt;p&gt;The following is a list of the most important gettext functions that django
exposes and can support unicode strings correctly. Keep in mind that they all
mark the containing &lt;em&gt;literal string&lt;/em&gt; as translatable, that is, you need to pass
the string itself as an argument, not a variable.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ugettext&lt;/code&gt;: The function returns the   translation for the currently selected language.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ugettext_lazy&lt;/code&gt;: The function marks the string as translation string, but only
fetches the translated string, when it is used in a string context, such as
when rendering a template.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ugettext_noop&lt;/code&gt;: This function only marks a string as translation string, it
does not have any other effect; that is, it always returns the string itself.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;ugettext_lazy&lt;/code&gt; function is useful in cases, where a string needs to be
marked as translation string, but the user&amp;rsquo;s locale is not active yet. For
instance, all strings in a model or in the settings are loaded, when the django
process is started. During startup, there is no user request that sets the
active locale. By using the &lt;code&gt;ugettext_lazy&lt;/code&gt; function, you ensure that the
translations will be actually fetched only during a user request, when the locale is known.&lt;/p&gt;

&lt;p&gt;Given the &lt;code&gt;ugettext_lazy&lt;/code&gt; function, the &lt;code&gt;ugettext_noop&lt;/code&gt; function seems to be
redundant. However, it is really useful in cases that you want to mark a string
as translation string, but need to use it in other contexts in its original form
as well, such as an error message that has to be logged, too. For instance, take
the following view that returns an error message to the user (it is a standard practice to import the gettext functions as &amp;ldquo;&lt;code&gt;_&lt;/code&gt;&amp;rdquo;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import logging
from django.http import HttpResponse
from django.utils.translation import ugettext as _

def view(request):
    msg = _(&amp;quot;An error has occurred&amp;quot;)
    logging.error(msg)
    return HttpResponse(msg)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The response will contain the translated error message, but so will the logs. In
order to circumvent this issue, you can use the &lt;code&gt;ugettext_noop&lt;/code&gt; function
instead:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import logging
from django.http import HttpResponse
from django.utils.translation import ugettext as _, ugettext_noop as _noop

def view(request):
    msg = _noop(&amp;quot;An error has occurred&amp;quot;)
    logging.error(msg)
    return HttpResponse(_(msg))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;ugettext_noop&lt;/code&gt; will force gettext to mark the error message as translation
string, but it will return the original (English) string. As a result, the log
messages will use the English phrase. However, we still want to present the
translated message to the user. We achieve this by using the &lt;code&gt;ugettext&lt;/code&gt; function
to force evaluating the string and fetching the translated message. This
technique is especially useful for exception messages, that need to be logged in
a higher layer of the codebase but also presented to the user.&lt;/p&gt;

&lt;h2 id=&#34;plural-support&#34;&gt;Plural support&lt;/h2&gt;

&lt;p&gt;Most languages have two &lt;strong&gt;plural forms&lt;/strong&gt;: singular and plural. Some languages,
however, have only one, like Japanese. Others can have up to six, like Arabic.&lt;/p&gt;

&lt;p&gt;Which plural  form to use  depends on the number of objects the phrase refers to.  For instance, English  uses the
singular  form, when  the phrase  refers  to one  object (&amp;ldquo;1  language&amp;rdquo;), and  the
plural, when it refers to none (&amp;ldquo;no languages&amp;rdquo;) or more than one (&amp;ldquo;2 languages&amp;rdquo;). Other languages have different rules.&lt;/p&gt;

&lt;p&gt;Django supports plurals with the &lt;code&gt;n&lt;/code&gt; family of gettext functions: &lt;code&gt;ungettext&lt;/code&gt;
and &lt;code&gt;ungettext_lazy&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;context-support&#34;&gt;Context support&lt;/h2&gt;

&lt;p&gt;Gettext allows developers to define the &lt;strong&gt;context&lt;/strong&gt; of a string. For instance,
the word &amp;ldquo;Read&amp;rdquo; can mean &amp;ldquo;read an email&amp;rdquo; or &amp;ldquo;emails read&amp;rdquo;. The developer can
define and explain the context of a string to differentiate between the two uses. This way, gettext will create
separate entries for the word &amp;ldquo;read&amp;rdquo;, one for each context.&lt;/p&gt;

&lt;p&gt;This is supported in django with the &lt;code&gt;p&lt;/code&gt; family of gettext functions:
&lt;code&gt;pgettext&lt;/code&gt;, &lt;code&gt;pgettext_lazy&lt;/code&gt;, &lt;code&gt;npgettext&lt;/code&gt; and &lt;code&gt;npgettext_lazy&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;support-in-templates&#34;&gt;Support in templates&lt;/h2&gt;

&lt;p&gt;Django provides two &lt;em&gt;templatetags&lt;/em&gt; for marking translation strings in templates:
&lt;code&gt;trans&lt;/code&gt; and &lt;code&gt;blocktrans&lt;/code&gt;. The main difference is that the &lt;code&gt;trans&lt;/code&gt; templatetag
only supports simple strings, while the &lt;code&gt;blocktrans&lt;/code&gt; templatetag supports
variable substitution (placeholders) as well.&lt;/p&gt;

&lt;p&gt;Both templatetags support most of the gettext features. One thing to keep in
mind for the &lt;code&gt;blocktrans&lt;/code&gt; templatetag, though, is that the containing string is
extracted as is. This means that the string will be extracted by gettext with
any newline and space characters or indentation it might have. For this reason,
all indentation should be avoided.&lt;/p&gt;

&lt;p&gt;More details for how to internationalize your web application can be found at
&lt;a href=&#34;https://docs.djangoproject.com/en/dev/topics/i18n/translation/&#34;&gt;django&amp;rsquo;s documentation&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>